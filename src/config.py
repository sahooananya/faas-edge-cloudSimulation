import random
import networkx as nx

MS_PER_SECOND = 1000.0
DEFAULT_FUNCTION_RUNTIME = 0.1 * MS_PER_SECOND

NUM_EDGE_NODES = 15
EDGE_CACHE_SIZE_PER_NODE = 6
COLD_START_PENALTY = 0.1 * MS_PER_SECOND
SIMULATION_DURATION = 800 * MS_PER_SECOND

NUM_EDGE_GRAPH_EDGES = 20
random.seed(42)
G_edge = nx.gnm_random_graph(NUM_EDGE_NODES, NUM_EDGE_GRAPH_EDGES)
ADJACENCY_MATRIX = nx.to_numpy_array(G_edge).tolist()
print(f"Config: Generated edge network with {NUM_EDGE_NODES} nodes and {G_edge.number_of_edges()} edges.")

EDGE_TO_EDGE_LATENCY = 0.05 * MS_PER_SECOND
CLOUD_TO_EDGE_LATENCY = 0.15 * MS_PER_SECOND
EDGE_NODES_CONNECTED_TO_CLOUD = [0, 1]

PEGASUS_WORKFLOW_FILEPATHS = [
    'data/CyberShake_30.xml',
    'data/Inspiral_30.xml',
    'data/Sipht_30.xml',
]

SCHEDULING_POLICY = "CriticalPathFirst"
CACHE_SHARING_POLICY = "partial_public_private"
PUBLIC_CACHE_FRACTION = 0.5

PREDICTION_INTERVAL = 5.0 * MS_PER_SECOND
MIN_WORKFLOW_SUBMISSION_INTERVAL = 15.0 * MS_PER_SECOND
MAX_WORKFLOW_SUBMISSION_INTERVAL = 30.0 * MS_PER_SECOND
TOTAL_WORKFLOW_SUBMISSIONS = 30
WORKFLOW_SELECTION_PROBABILITY = None

RANDOM_SEED = 42
